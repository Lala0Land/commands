# Команды

pwd #- посмотреть текущую директорию (print working directory)
ls #-  список файлов в папке
ls -a #- список всех файлов вместе со скрытыми
cd #- изменить папку
	cd #- возвращает к домашней папке
	cd .. #- на один уровень выше
	cd music #- заходит в папку music
~ #- заменяет домашний каталог

stat #- информация о файле
head #- показывает первые 10 строк файла
	head -n 2 .bash #- показывает  первые 2 строки файла .bash
tail #- показывает последние 10 строк файла
	tail -n 2 .bash #- показывает последние 2 строки файла .bash
tail -f path/to/file #- не просто выводит последние строчки файла, но ждёт появления новых, остановить -  ctrl+C

man #- manual (q - выход)
cat #- прочитать файл, вывести на экран, объединить файлы
	man cat #- мануал функции cat
	cat .bash #- прочитать файл .bash
echo #- вывод строки
	echo *s #- вывод всех файлов в текущем каталоге, заканчивающихся на s
	echo ~ #- показывает домашний каталог текущего пользователя
	

/root #- расположение суперпользователя
/home/ksu #- расположение пользователя

grep -C 1 aliases .bashrc # ищет (грепает) слово aliases в файле .bashrc, отображая (-C) до и после по 1 строке (-A - after, отображает строки после слова, -B - before - отображает строки перед словом)

grep -rn bashrc . # - «r» говорит о том, что неизвестно, в каком файле то, что мы ищем, а знаем только директорию (. - значит, поиск будет произведен в файлах текущей директории и всех вложенных поддиректориях), выводится файл, в котором найдена строка. n показывает номер строки

| # - пайплайн, конвейер, соединяет команды
grep alias .bashrc | grep color 
# Или
cat .bashrc | grep alias  | grep color
# - ищет строчки со словом alias в файле, а затем ищет среди найденного те строки, где еще есть color

cat source | grep Dog | uniq | sort
uniq # - убрать повторения
sort # - сортировать строки текста

find -name haha # - поиск по имени файла/директории haha
find /usr -type d -name haha # - поиск в папке /usr (-type d - директория, -type f - файл)
find /var/log -type f -name *.log -mtime -7 # - найти в папке вар/лог файлы (f), которые были модифицированы (modified time) в течение последних 7ми дней

cat /etc/os-release # - посмотреть distribution



nano <название> # - открыть файл в текстовом редакторе. Для сохранения информации нажимаем CTRL+X, потом Y (N если не хотите сохранять) и Enter
nano/vim .bashrc # - редактирование файла в редакторах Nano или Vim (Vim более сложный, в нем каждая клавиша означает действие)

> # - записать в файл
> - создать новый пустой файл
    echo 'hi' > result - записывает (перетирает) hi в файл result
>> - добавить в конец файла

wc - world counter, считает слова, строки, символы
	wc -l < result - флаг -l указывает, что считается количество строк в файле result
	ws -l < result > output - объединили две команды

Cуществуют следующие стандартные потоки ввода-вывода: 
STDIN — 0 (standard input)
STDOUT — 1 (standard out)
STDERR — 2 (standard error)
Для указания потока, в который осуществляется перенаправление, нужно добавлять символ & после символа перенаправления.
2>&1 - ошибка переправляется в вывод
	ls lala > output 2>&1 (Сначала STDOUT перенаправляется в 		файл, затем STDERR перенаправляется в STDOUT, продолжая 		запись в файл)
	cat output
	ls: cannot access 'lala': No such file or directory
Или:
cd lala 2> output - перенаправляет поток STDERR в файл
Или:
cd lala &> output - перенаправляет оба потока в файл


touch file- создать пустой файл (но на самом деле эта утилита меняет время последнего доступа к файлу, но если файла не существует, то он будет создан)(touch /tmp/tempfile если надо директорию)
rm file - удалить файл (remove)
mv file file2 (заменяет file на file2) - переименовать файл (move - переименование равносильно перемещению)
cp file2 file2 - копирование(copy) откуда-куда (для копирования директории добавить -r)
cp -r dir1/* dir2 - копировать каталог dir1 и всё его содержимое в dir2
	cp -a - скопировать файлы каталога со всеми идентификаторами, включая идентификаторы владельцев и права доступа (--archive)
	-i, -—interactive - запрашивает у пользователя подтверждение перед перезаписью существующего файла(-—interactive)
	-r, -—recursive - рекурсивно копирует каталоги и их содержимое, обязательный параметр при копировании каталога
	-u, -—update - при копировании файлов из одного каталога в другой копирует только отсутствующие файлы
	-v, —-verbose - вывод информационного сообщения в процессе копирования
	

ln - создать жесткую ссылку 
	ln file1 ссылка - создать жесткую ссылку на файл
	ln -s file1/dir1 ссылка - создать символическую ссылку на файл или каталог

Правила по созданию жестких ссылок
1) Жесткая ссылка не может указывать на файл за пределами собственной файловой системы (т.е. Файл не может быть в другом разделе диска)
2) Жесткая ссылка не может указывать на каталог
3) При удалении жесткой ссылки удаляется только ссылка, файл остается на месте

Символические ссылки
1)Когда создается символическая ссылка, в действительности создается файл особого типа, который содержит текстовый указатель на файл или каталог (похожи на ярлыки). Файл, на который указывает символическая ссылка, и сама символическая ссылка почти неотличимы друг от друга. Записывая в сс, запись будет выполняться в файл.
2) При удалении сс удаляется только сс, не файл. Если сначала удалить файл, то ссылка останется (битые ссылки).

df -h - сколько свободного места (disk free, h - human, удобно для чтения)
htop - использование памяти
ncdu - где лежат основные файлы и сколько места занимают
	


mkdir d_i_r - создать директорию (make directory), не создает вложенные директории
mkdir -p one/two/three - с помощью флага -p рекурсивно создает директории в директории
rm -r my-dir - удаление директорий рекурсивно, без флага -r не работает. будет задавать вопросы по файлам с ограниченным доступом, точно ли их надо удалить
rm -fr my-dir - с флагом -f (force) удалит всю директорию с файлами без вопросов

whoami - вывод пользователя
ps - вывод отчета о работающих процессах
ps aux - информация о том, какой процесс запущен и под каким пользователем

cat /etc/passwd - выводит пользователей
	 root:x:0:0:root:/root:/bin/bash
	_apt:x:105:65534::/nonexistent:/usr/sbin/nologin
              имя  пароль  UID    group ID



type cp - узнать, где лежит исполняемый файл конкретной программы
whereis cp
which cp
ls -al /bin | grep cp

Почти все директории, в которых хранятся исполняемые файлы программ, оканчиваются на bin - бинарники




Переменные окружения
env - посмотреть установленные переменные окружения (environment - переменные окружения)
echo $HOME - вывод переменной HOME (базовые переменные, которые устанавливаются bash при старте, перед переменной ставится $) (выведется адрес домашней директории)
$PATH - набор каталогов, в которых расположены исполняемые файлы

HOME=/tmp (без пробелов, присваивается новый адрес домашней директории)
HOME=/tmp cd - когда указано в одной строчке, то директория меняется только для конкретной команды. Если опять написать cd, то будет предыдущая директория 
export HOME=/tmp - меняет директорию для всей сессии, глобально

.bash_history - хранит историю команд
HISTFILESIZE - отвечает за кол-во команд, хранимых в истории


printenv | less - посмотреть список доступных переменных

Прямой запуск программ всегда должен быть путём до файла, например, path/to/executable/file. А если файл лежит в текущей директории, то обращение через точку ./:

	pwd
	/home/hex

	cd test/
	ls -al
	total 16
	drwxr-xr-x 2 hex hex 4096 Sep 10 15:24 .
	drwxr-xr-x 1 hex hex 4096 Sep 10 15:24 ..
	-rwxr-xr-x 1 hex hex   60 Sep 10 15:24 executable

	executable
	bash: executable: command not found

	./executable
	Hello from executable!


history - посмотреть историю команд (выводит содержимое .bash_history)
	history 5 - выводит 5 последних команд с номерами
	!2 - выполняет вторую команду из списка выше
	history | grep export - можно отыскать команду в истории

Ctrl + r - поиск по истории, ожидает ввода символов и отображает ближайшую команду. Чтобы увидеть другие результаты, надо опять нажать Ctrl + r


id - посмотреть свой идентификатор (uid)
cat /etc/passwd - в этом файле хранятся пользователи
вывод:
root:*:0:0:System Administrator:/var/root:/bin/sh
Имя:пароль:идентификатор польз-я(UID):идентификатор группы(GID):инф о польз-е:дом директория:шелл по умолчанию

ls -l /folder | wc -l - посмотреть количество файлов в папке


sudo -  повышает до суперпользователя, пишется слева от команды (пароль запрашивает от текущего пользователя)
	sudo touch /etc/myfile

sudo -u nobody mkdir /tmp/test - выполняет команду от имени пользователя nobody (чтобы выполнять команду не от суперпользователя, то после sudo нужен флаг -u и имя пользователя)

sudo -i
…
exit
(Если надо произвести несколько действий от имени другого пользователя, то можно запустить такую сессию и обязательно в конце из нее выйти)

выполнить команду от имени root
sudo command
su -c «command»
отредактировать файл от имени root
sudoedit file
su vim file
sudo vim file
получить оболочку root
sudo -i
su -
sudo su -

tee - читает из стандартного ввода и записывает в файл(ы)(если файл не существует, то tee его создает)
	echo ‘Hello’ | sudo tee config/newfile - программа создаёт файл newfile в директории config, доступной только root, и записывает туда слово

Права доступа
r - чтение (read)
w - запись (write)
x - исполнение (execute)(обращаться к файлам и директориям)
3 типа пользователей: владелец (Owner), группа (Group), остальные (Other)

Пример строчки из вывода ls -la 
	-rw-r--r-- 1 kirill.m kirill.m 3771 Aug 31  2015 .bashrc
- тип (это файл) (d - домашняя дир-я)
rw- права доступа для владельца
r-- права доступа для участника группы kirill.m
r-- права доступа для всех остальных

chown - изменить владельца и/или группу для файлов (change owner)
	chown root /var/run/httpd.pid - поменял владельца файла на root
	chown nobody:nogroup /tmp - поменял имя владельца для /temp на nobody, группу на nogroup

chmod -  изменить права доступа к файлам/каталогам (change mode)
	chmod u=rwx,g=rx,o=rx filename - устанавливает права
	или
	chmod 755 filename

Суперпользователь всегда имеет доступ ко всему вне зависимости от прав


Иногда встречается такое описание прав доступа:
 
#	Permission				rwx		Binary
7	read, write and execute	rwx		111
6	read and write			rw-		110
5	read and execute			r-x		101
4	read only				r--		100
3	write and execute			-wx		011
2	write only				-w-		010
1	execute only				--x		001


Пакетные менеджеры

apt - расширенный пакетный инструмент (advanced package tool)
apt install name - установить программу name. Почти всегда пакетные менеджеры требуют запуска от суперпользователя (root), так как установка программ происходит в системные директории, недоступные для записи обычному пользователю (но в macOS не нужно использовать sudo).
apt remove name - удалить программу
sudo apt update - ручное обновление (локального индекса)
apt search php - поиск пакета по описанию php

brew -  пакетный менеджер для Mac



Групповые символы
* - заменяет последовательность любых символов
? - заменяет любой 1 символ
[символы] - любой символ из указанных символов
[!символы] - ! - любой 1 символ, не принадлежащий данному множеству символов
[[:класс:]] - любой 1 символ, принадлежащий заданному классу
		например: [abc] - все имена файлов, начинающиеся либо на a, либо на b, либо на c
Классы символов:
[:alnum:] - любой алфавитно-цифровой символ
[:alpha:] - любой алфавитный символ
[:digit:] - любая цифра
[:lower:] - любая буква нижнего регистра
[:upper:] - любая буква верхнего  регистра


Арифметические операторы. Подстановка команд

echo $((2+2)) - выведет результат «4»
$(выражение) : + - * / %(деление по модулю, остаток от деления) **(возведение в степень) - подстановка поддерживает только целочисленные значения, пробелы не играют роли
echo $(((3**2)*3)) - вывод: «27»
echo 1-{A,B,C}-2 - вывод: 1-А-2 1-B-2 1-C-2
echo Число_{1..5} - вывод: Число_1 Число_2 Число_3 Число_4 Число_5

Подстановки команд
Подстановка команд позволяет использовать поток вывода команд в качестве аргумента в других командах
echo $(ls) - $() подстановка 
ls -l $(ls)




Vim

Чтобы войти в режим ввода в виме, надо нажать i
Выйти - Esc или ctrl+[
Убедитесь, что вы находитесь в командном режиме, на всякий случай нажмите Esc (или комбинацию Ctrl + [). Затем наберите :, эта команда переведёт вас в режим командной строки (ещё один режим), затем введите q! и нажмите Enter. Так вы выйдете из вима без сохранения изменений. Если набрать :wq, то перед выходом сохранятся все изменения. Если вы хотите просто сохраниться без выхода, то наберите :w.

Пейджеры

less - открывает файл и остаётся в этом режиме. Он позволяет перемещаться по файлу вперёд и назад, производить поиск
	q — выход
	•	f — вперёд на страницу
	•	b — назад на страницу
	•	если набрать /, затем начать вводить буквы и нажать Enter, то выполнится поиск введённого текста. Перемещение по найденным совпадениям выполняется командой n (переход к следующему совпадению) и командой N (переход к предыдущему совпадению).



wget -qO- eth0.me - узнать IP ноды
df -h - Занятое место 

sudo netstat -tulpn | grep LISTEN - узнать, какие порты заняты нодой








СЕРВЕР

ssh-copy-id -i ~/.ssh/id_rsa.pub root@135.181.82.144
Копирует ключ (-input) отсюда           сюда
В итоге сможем заходить на сервер без пароля, так как на сервере есть наш public key, и при подключении его ищут, находят, проверяют, они совпадают, и нас пускают

scp cat1.png root@95.217.9.196:/root - скопировать файл cat1.png на сервер в папку root (писать команду на компе)

scp root@95.217.9.196:cat1.png /Users/nikandrsurkov/Desktop
 - скопировать файл cat1 с сервера на комп на рабочий стол

